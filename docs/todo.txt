TODO:
X Server & Database for longevity, maintenance, & realtime updating
X Data Resilience - make a snapshot
X Automatic block imports with securities from duplicate blocks
X Collect all information needed for DB-pulled address info
X Collect all information needed for DB-pulled rich list and wealth distribution
X Search by address
X Top 500 addresses
X Wealth distribution by address
X Address details page: rank, balance, in/out, staking, first & last activity
X Update database with new block information
X Perform safe database updates on new blocks
X Fix bug with balance calculations
- Add identifiers to addresses for developer fund, exchanges, miners, & stakepools
	X Developer Fund
	X Miners
	X Exchanges
	- Stakepools
X Top 500 HD wallets from DB (NOTE: Not from DB, but from accurate source)
X Wealth distribution by HD wallet from DB (NOTE: Not from DB, but from accurate source)
X Additional address details: List all addresses linked together, and from which transactions (HD)
X Historical snapshots of rich list & wealth distribution (slider)
X Additional address details: Map portion of inputs from mining, genesis block, exchange, or staking
- Flag addresses that are actively staking
- Voting Distribution Page: show distribution of voters' tickets & relative influence that their tickets have on vote outcome (onchain)
X Mobile-friendly UI
X Optimize database updates

Important:
- Update produce_db_inserts to include address_id with vouts


Additional Todo:
- Add caching on PHP side to common DB queries
- Re-run the historical data accumulation to include tags for all current identifiers
- Add Google Analytics
- Backup entire database, download, before launch
- SSL certificate
- Add toggle-able rows


To Revisit:
X DB should be definitive for more than just transactions and the top 500. We have two data sources. We should ideally only have one.
	- UPDATE: Was able to migrate the HD logic to Postgres and the database. We can start to phase out the JavaScript caches.
	- It's fine if we migrate to mongo or an ever-running JS module, but it needs to be architected correctly.
	- Alternatively, we just need to definitively determine HD wallets using Postgres instead of Javascript. Which could be via imports or a working schema, but I think the logic to generate HD wallets can't be fully implemented in SQL - at least, not to my knowledge. I think we need to go outside of Postgres to format the data and import it.
